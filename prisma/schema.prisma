generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(uuid())
  userId      String
  name        String
  description String
  price       Int
  stock       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id, userId])
}

model User {
  id               String    @id @default(uuid())
  email            String?   @unique
  password         String?
  name             String?
  avatarUrl        String?
  lastLoginAt      DateTime?
  role             Role      @default(USER)
  isEmailVerified  Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  tokens           Token[]
  products         Product[]
  accounts         Account[]
}

enum TokenType {
  REFRESH
  EMAIL_VERIFY
  PASSWORD_RESET
}

model Token {
  id         String     @id @default(uuid())
  type       TokenType
  token      String     @unique
  expiresAt  DateTime
  createdAt  DateTime   @default(now())
  consumedAt DateTime?
  revokedAt  DateTime?

  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String    @id @default(uuid())
  userId             String
  provider           String
  providerAccountId  String
  accessToken        String?
  refreshToken       String?
  expiresAt          DateTime?
  tokenType          String?
  scope              String?
  idToken            String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, provider])
}